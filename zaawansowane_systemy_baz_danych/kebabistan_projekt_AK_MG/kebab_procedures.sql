use kebab;

--!Examples are to be found in kebab_inserts and kebab_queries!

--1
-- Procedure which creates order for given product and employee and location
go
create or alter procedure createOrder(
	@product_id int,
	@employee_id int,
	@amount int, 
	@location varchar(50)
)
as
begin

	if(@employee_id is null)
		print 'Pracownik nie istnieje, nie mo¿na z³o¿yæ zamówienia';

	else if(@product_id is null)
		print 'Produkt nie istnieje, nie mo¿na z³o¿yæ zamówienia';

	else if exists(select * from product where id = @product_id and is_archive = 1)
		print 'Produkt archiwalny, nie mo¿na z³o¿yæ zamówienia';

	else if((select is_busy from employee where id = @employee_id) = 1)
		print 'Pracownik zajêty, nie mo¿na z³o¿yæ zamówienia';

	else 
	begin
		update employee set is_busy = 'True' where id = @employee_id
		insert into "order" (acceptance_time, location) values (GETDATE(), @location)
		declare @order_id int = (select top 1 id from "order" order by id desc)
		insert into product_order (order_id, product_id, amount) values (@order_id, @product_id, @amount)
		insert into employee_order (employee_id, order_id) values (@employee_id, @order_id)
		print 'Zlozono zamowienie'
	end
end

--2
-- Procedure which completes order with given id
go
create or alter procedure completeOrder(@order int)
as
begin
	declare @emp int = (select employee_id from employee_order where order_id = @order)
	declare @busy bit = (select is_busy from employee where id = @emp)
	declare @realizationTime datetime = (select realization_time from "order" where id = @order)
	
	if not exists (select id from "order" where id = @order)
		print 'Nie mo¿na zakoñczyæ, nie ma takiego zamówienia';

	else if @realizationTime is not null
		print 'Nie mo¿na zakoñczyæ, zamówienie zosta³o ju¿ zakoñczone';

	else if @busy = 0
		print 'b³¹d spójnoœci danych, pracownik nie jest przypisany do tego zamówienia';

	else 
	begin
		update "order" set realization_time = GETDATE() where id = @order
		update employee set is_busy = 'False' where id = @emp
		print 'Zamowienie ukonczone'
	end
end

--3
-- Procedure which removes products that were sold least times
go
create or alter procedure removeUnpopularProducts
as
begin
	with order_number_per_product as (
	select p.id, count(po.product_id) as order_number
	from product p
	left join product_order po on po.product_id = p.id
	group by p.id)

	delete product where product.id in (
		select id from order_number_per_product where order_number = (select min(order_number) from order_number_per_product))
end

--4
--Procedure which increases salary of employee which generated biggest profit in specific time period (if there are more than one, then noone gets salary increase)
go
create or alter procedure increase_best_employee_salary(@from datetime, @to datetime)
as
begin
	if (
		select count(id) from employee 
		where dbo.timeProfit(id, @from, @to) = (
			select max(dbo.timeProfit(id, @from, @to)) from employee
		)
	) > 1
		print 'Brak najlepszego pracownika, nie mo¿na przyznaæ premii'
	
	else 
	begin
		declare @best_employee_id int = (
			select id from employee 
			where dbo.timeProfit(id, @from, @to) = (
				select max(dbo.timeProfit(id, @from, @to)) from employee
			)
		)
		declare @best_employee_name varchar(50) = (select name from employee where id = @best_employee_id)
		begin
			update employee set salary = salary * 1.1 where id = @best_employee_id
			print 'Podwy¿szono pensjê najlepszego pracownika: ' + @best_employee_name
		end
	end
end

--5
--Function which returns total profit generated by employee in period of time
go
create or alter function timeProfit(@emp int, @from datetime, @to datetime)
returns float
as
begin
	declare @sum float = 0.0
	declare kursor cursor for
	select price, amount
	from product p
	left join product_order po on po.product_id = p.id 
	left join "order" o on po.order_id = o.id
	left join employee_order eo on eo.order_id = po.order_id
	where eo.employee_id = @emp and o.realization_time >= @from and o.realization_time <= @to
	declare @price float, @amount int
	open kursor
	fetch next from kursor into @price, @amount
	while @@FETCH_STATUS = 0
		begin
			set @sum = @sum + (@price * @amount)
			fetch next from kursor into @price, @amount
		end
	close kursor
	deallocate kursor
	return @sum
end
go 